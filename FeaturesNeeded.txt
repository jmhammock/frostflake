Features Needed:
- Attachment/Parenting
- Particles
- Text Objects
- 9patch
- Polygon Collision
- Hardware acceleration when possible!
- Debug tools: framerate, etc


TODO:
- Sprite is a first class object, get rid of Drawable (and Polygon?) for now
- Renderer should recursively draw Sprite children
- Attach/Detach should update position and velocity
- need a method to get absolute position
- rework camera

Thoughts on Sprites
1) There is no "Drawable" or even "Positionable". "Sprite" is a first tier object.
2) Sprites have a parent and children[] objects
3) Sprites do not have to have a texture. A textureless sprite is basically a positionable object
4) Sprites do not have relativePosition. If they are attached to a parent their position will be drawn relative to the Parent and their velocity will also stack.
5) Drawing will be tree based. Top level sprites will be passed to the renderer. The renderer will have a recursive draw method that goes N depth into the children to render. Translations will stack all the way down the tree and reverse on the way back up so that nested translations are just as cheap to draw as first level
6) Sprites have a "level" property. Eventually, sprites in the same tier will be sorted before being drawn. Flash worked this way. If an object drawdepth is 5 but it's parent drawdepth is 1, it will be rendered fifth within position 1 if that makes sense.
7) Camera is not a positionable object (aka Sprite). It's position is used differently for translating the canvas and it really has nothing in common with a sprite besides the fact that they both have a position and get updated.


// camera: expose public methods and members
        return {
            position:                   position,
            velocity:                   velocity,
            update:                     update,
            attachTo:                   attachTo,
            detach:                     detach,
            start:                      start,
            end:                        end,
            getRandomPointInView:       getRandomPointInView,
            getRandomXInView:           getRandomXInView,
            getRandomYInView:           getRandomYInView,
            setViewSize:                setViewSize,
            getViewPort:             getViewPort,
        };